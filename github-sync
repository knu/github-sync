#!/usr/bin/env ruby
#
# github-sync - checks out all your projects on GitHub under your local directory
#
# How to set up:
#     $ GITHUB_DIR=$HOME/github; export GITHUB_DIR
#     # or you will have $HOME/src/github by default
#
# How to use:
#     $ github-sync
#     $ github-sync $org1 $org2 ...
#
# Copyright (c) 2009, 2012, 2013 Akinori MUSHA
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

require 'rubygems'
require 'pp'
require 'json'
require 'mechanize'
require 'shellwords'
require 'optparse'

def setup
  $base_dir = ENV['GITHUB_DIR'] || File.expand_path('~/src/github')
  $user = `git config github.user`.chomp
  $new_only = false
  $exclude = (ENV['GITHUB_SYNC_EXCLUDE'] || '').split

  if $user.empty?
    STDERR.puts 'Please set github.user in ~/.gitconfig.'
    exit
  end
end

def main(argv)
  setup
  OptionParser.new { |opts|
    opts.on('-N') { |bool| $new_only = bool }
    opts.on('-x PATTERN') { |name| $exclude << name }
    opts.parse!(argv)
  }
  checkout_all(argv)
end

def ua
  $ua ||= Mechanize.new { |ua|
    ua.cert_store = OpenSSL::X509::Store.new.tap { |store|
      store.set_default_paths
      %w[
        /opt/local/share/curl/curl-ca-bundle.crt
      ].each { |file|
        store.add_file file if File.exist?(file)
      }
    }
  }
end

def repo_dirname(repo)
  ($repo_dirname ||= {})[repo['clone_url']] ||=
    repo['name']
    # begin
    #   user = repo['owner']['login']
    #   if user == $user
    #     repo['name']
    #   else
    #     '%s-%s' % [user, repo['name']]
    #   end
    # end
end

def github_get_all(url, result = nil)
  res = ua.get(url)

  if result.nil?
    url += '?page=1&per_page=100'
    result = []
  end

  result.concat(JSON.parse(res.body))

  if links = res['Link']
    links.scan(/(?:\A|\G, *)<([^>]+)>; *rel="([^"]+)"/) { |link, rel|
      return github_get_all(link, result) if rel == 'next'
    }
  end

  result
end

def checkout_all(users)
  Dir.mkdir($base_dir) if !File.directory?($base_dir)
  Dir.chdir($base_dir)

  users = [$user] if users.empty?

  users.map { |user|
    begin
      github_get_all('https://api.github.com/users/%s/repos' % user)
    rescue
      github_get_all('https://api.github.com/orgs/%s/repos' % user)
    end
  }.map { |result|
    result.sort { |a, b|
      if !File.directory?(repo_dirname(a))
        -1
      elsif !File.directory?(repo_dirname(b))
        1
      else
        a['name'] <=> b['name']
      end
    }
  }.flatten(1).each { |repo|
    repo_path = '%s/%s' % [repo['owner']['login'], repo['name']]
    next if $exclude.any? { |pattern|
      File.fnmatch(pattern, repo_path, File::FNM_PATHNAME)
    }

    dir = repo_dirname(repo)

    if File.directory?(dir)
      next if $new_only
      puts '==> Updating %s' % repo['full_name']
      Dir.chdir(dir) {
        system 'git remote update'
        local = `git symbolic-ref HEAD 2>/dev/null`.strip
        $?.success? && !local.empty? or break
        remote = `git for-each-ref --format='%(upstream:short)' #{local.shellescape} 2>/dev/null`.strip
        $?.success? && !remote.empty? or break
        system 'git', 'rebase', remote
        system 'git submodule update --init --recursive'
      }
    else
      puts '==> Cloning into %s' % repo['full_name']
      system 'git', 'clone', '--recursive', repo['ssh_url'], dir
    end

    if repo['fork'] && !Dir.chdir(dir) {
        `git remote 2>/dev/null`
      }.split(' ').include?('upstream')
    then
      detail = JSON.parse(ua.get_file('https://api.github.com/repos/%s' % repo['full_name']))
      upstream_url = detail['parent']['clone_url']
      puts 'Registering upstream repository: %s' % upstream_url
      Dir.chdir(dir) {
        system 'git', 'remote', 'add', 'upstream', upstream_url
      }
    end

    puts ''
  }
end

main(ARGV)
